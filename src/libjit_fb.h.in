#ifndef LIBJIT_FB_H_GUARD
#define LIBJIT_FB_H_GUARD


#if defined(__cplusplus)
#  define EXTERN extern "C"
#else
#  define EXTERN
#endif

#include <assert.h>
#include <parrot/parrot.h>
// #include "frame_builder.h"

#include <jit/jit.h>

PARROT_EXPORT void
Parrot_lib_libjit_fb_init(PARROT_INTERP, SHIM(PMC *lib));

/*
 * ThunkFactory management
 */
static PMC *
ThunkFactory_clone(PARROT_INTERP, PMC *tf, void *u);

static void
ThunkFactory_free(PARROT_INTERP, void *tf, void *ctx);

static jit_context_t
ThunkFactory_get_ctx(PARROT_INTERP, PMC *tf);

static void
ThunkFactory_set_ctx(PARROT_INTERP, PMC *tf, jit_context_t ctx);

/*
 * Thunk management
 */

static void
Thunk_init(PARROT_INTERP, PMC *thk, PMC *fact, STRING *sig);

static PMC *
Thunk_clone(PARROT_INTERP, PMC *thk, void *sig_pmc);

static void
Thunk_free(PARROT_INTERP, void *thk, void *fact);

static STRING *
Thunk_get_sig(PARROT_INTERP, PMC *thk);

static void
Thunk_set_sig(PARROT_INTERP, PMC *thk, STRING *sig);

static PMC *
Thunk_get_factory(PARROT_INTERP, PMC *thk);

static void
Thunk_set_factory(PARROT_INTERP, PMC *thk, PMC *fact);

/*
 * JIT types
 */

#define JIT_TYPE_UINTVAL  @libjit_uv@
#define JIT_TYPE_INTVAL   @libjit_iv@
#define JIT_TYPE_FLOATVAL @libjit_nv@

/*
 * Object management functions
 */
static PMC *
Parrot_libjit_fb_build_thunk(PARROT_INTERP, PMC *self, STRING *signature);

static void
Parrot_libjit_fb_free_thunk(PARROT_INTERP, void *thunk, void *self);

static PMC *
Parrot_libjit_fb_clone_thunk(PARROT_INTERP, PMC *thunk, void *self);

/*
 * JIT functions
 */

static void *
Parrot_jit_create_thunk(Interp *, PMC *, const char *);

static void
Parrot_jit_parse_sig_args_pre(Interp *, const char *, int, jit_function_t, jit_value_t, jit_value_t, jit_value_t,
                              jit_type_t *, jit_value_t *, jit_value_t *);

static jit_type_t
Parrot_jit_parse_sig_ret_pre(Interp *, const char *);

static void
Parrot_jit_parse_sig_ret_post(Interp *, const char *, jit_function_t, jit_value_t, jit_value_t, jit_value_t, jit_value_t);

static void
Parrot_jit_parse_sig_args_post(Interp *, const char *, int, jit_function_t, jit_value_t, jit_value_t *, jit_value_t *);

static int
Parrot_jit_create_arg_regs(Interp *, const char *, int, jit_function_t, jit_value_t *);

static void
Parrot_jit_fill_args(Interp *, const char *, int, int, jit_function_t, jit_value_t, jit_value_t, jit_value_t,
                    jit_value_t *, jit_type_t *, jit_value_t *);

static jit_value_t
jit_value_create_intval_constant(jit_function_t, INTVAL);

/*
 * workaround for platforms that lack libjit alloca support
 */
#  if @libjit_has_alloca@
#    define JIT_ALLOCA(f, n)      jit_insn_alloca((f), (n))
#    define JIT_ALLOCA_FREE(f, p)
#  else
#    define JIT_ALLOCA(f, n)      jit__mem_sys_allocate((f), (n))
#    define JIT_ALLOCA_FREE(f, p) jit__mem_sys_free((f), (p))
#  endif

/*
 * JIT wrappers
 */

/* custom wrappers */
static jit_value_t
jit__Buffer_bufstart(jit_function_t, jit_value_t);

static jit_value_t
jit__CURRENT_CONTEXT(jit_function_t, jit_value_t);

static jit_value_t
jit__PMC_IS_NULL(jit_function_t, jit_value_t);

static jit_value_t
jit__Parrot_pcc_get_signature(jit_function_t, jit_value_t, jit_value_t);

static void
null_func(void);

/* vtable wrappers */
@vtable_wrap_decls@

/* function wrappers */
@func_wrap_decls@

#endif /* LIBJIT_FB_H_GUARD */

/*
 * Local variables:
 *   c-file-style: "parrot"
 * End:
 * vim: expandtab shiftwidth=4:
 */
